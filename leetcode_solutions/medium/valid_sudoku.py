#!/usr/bin/env python
# -*- coding: utf-8 -*-
from typing import List
from collections import defaultdict

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        three_hash = defaultdict(set)
        row_hash = defaultdict(set)
        col_hash = defaultdict(set)
        for i in range(9):
            for j in range(9):
                if board[i][j] == '.':
                    continue
                if (
                    board[i][j] in row_hash[i] or
                    board[i][j] in col_hash[j] or
                    board[i][j] in three_hash[(i//3, j//3)]
                ):
                    return False
                row_hash[i].add(board[i][j])
                col_hash[j].add(board[i][j])
                three_hash[(i//3, j//3)].add(board[i][j])
        return True



def test_isValidSudoku():
    s = Solution()
    board = [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    assert s.isValidSudoku(board) == True
    print('--------------------')
    board = [
        ["8","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    assert s.isValidSudoku(board) == False
    print('--------------------')
    board = [
        [".",".","4",".",".",".","6","3","."],
        [".",".",".",".",".",".",".",".","."],
        ["5",".",".",".",".",".",".","9","."],
        [".",".",".","5","6",".",".",".","."],
        ["4",".","3",".",".",".",".",".","1"],
        [".",".",".","7",".",".",".",".","."],
        [".",".",".","5",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]
    ]
    assert s.isValidSudoku(board) == False
    print('--------------------')
    board = [
        [".",".",".",".","5",".",".","1","."],
        [".","4",".","3",".",".",".",".","."],
        [".",".",".",".",".","3",".",".","1"],
        ["8",".",".",".",".",".",".","2","."],
        [".",".","2",".","7",".",".",".","."],
        [".","1","5",".",".",".",".",".","."],
        [".",".",".",".",".","2",".",".","."],
        [".","2",".","9",".",".",".",".","."],
        [".",".","4",".",".",".",".",".","."]
    ]
    assert s.isValidSudoku(board) == False
    print('--------------------')
    board = [[".","4",".",".",".",".",".",".","."],
             [".",".","4",".",".",".",".",".","."],
             [".",".",".","1",".",".","7",".","."],
             [".",".",".",".",".",".",".",".","."],
             [".",".",".","3",".",".",".","6","."],
             [".",".",".",".",".","6",".","9","."],
             [".",".",".",".","1",".",".",".","."],
             [".",".",".",".",".",".","2",".","."],
             [".",".",".","8",".",".",".",".","."]]
    assert s.isValidSudoku(board) == False
    
    print(" -------------------------- Test finished. -------------------------- ")


if __name__ == "__main__":
    test_isValidSudoku()
